# Docker Compose para Produção - Onlifin
# Este arquivo demonstra uma configuração de produção completa
# com banco de dados externo, volumes persistentes e configurações de segurança

version: '3.8'

services:
  onlifin:
    image: onlitec/onlifin:latest
    container_name: onlifin-prod
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"  # Para HTTPS
    
    environment:
      # Aplicação
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=https://your-domain.com
      - APP_KEY=base64:your-app-key-here
      
      # Banco de Dados
      - DB_CONNECTION=mysql
      - DB_HOST=mysql-prod
      - DB_PORT=3306
      - DB_DATABASE=onlifin_prod
      - DB_USERNAME=onlifin_user
      - DB_PASSWORD=${DB_PASSWORD}  # Use arquivo .env
      
      # Cache (Redis)
      - REDIS_HOST=redis-prod
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=6379
      
      # Email
      - MAIL_MAILER=smtp
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=587
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_ENCRYPTION=tls
      
      # AI Providers
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      
      # Segurança
      - SESSION_DRIVER=redis
      - CACHE_DRIVER=redis
      - QUEUE_CONNECTION=redis
    
    volumes:
      # Dados persistentes
      - onlifin_storage:/var/www/html/storage
      - onlifin_logs:/var/www/html/storage/logs
      
      # Certificados SSL (se usando Let's Encrypt)
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /etc/ssl:/etc/ssl:ro
      
      # Configuração personalizada (opcional)
      - ./production.env:/var/www/html/.env:ro
    
    depends_on:
      - mysql-prod
      - redis-prod
    
    networks:
      - onlifin-network
    
    # Configurações de segurança
    security_opt:
      - no-new-privileges:true
    
    # Limites de recursos
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mysql-prod:
    image: mariadb:10.6
    container_name: mysql-prod
    restart: unless-stopped
    
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=onlifin_prod
      - MYSQL_USER=onlifin_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
      
      # Configurações de performance
      - MYSQL_INNODB_BUFFER_POOL_SIZE=1G
      - MYSQL_INNODB_LOG_FILE_SIZE=256M
    
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
    
    networks:
      - onlifin-network
    
    # Configurações de segurança
    security_opt:
      - no-new-privileges:true
    
    # Limites de recursos
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    
    # Health check
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-prod:
    image: redis:7-alpine
    container_name: redis-prod
    restart: unless-stopped
    
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis_data:/data
    
    networks:
      - onlifin-network
    
    # Configurações de segurança
    security_opt:
      - no-new-privileges:true
    
    # Limites de recursos
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup automático (opcional)
  backup:
    image: mariadb:10.6
    container_name: onlifin-backup
    restart: "no"
    
    environment:
      - MYSQL_HOST=mysql-prod
      - MYSQL_USER=onlifin_user
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=onlifin_prod
    
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    
    command: /backup.sh
    
    depends_on:
      - mysql-prod
    
    networks:
      - onlifin-network
    
    # Executar apenas quando necessário
    profiles:
      - backup

  # Monitoramento (opcional)
  monitoring:
    image: prom/prometheus:latest
    container_name: onlifin-monitoring
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    networks:
      - onlifin-network
    
    profiles:
      - monitoring

networks:
  onlifin-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  onlifin_storage:
    driver: local
  onlifin_logs:
    driver: local
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

# Configurações globais
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
