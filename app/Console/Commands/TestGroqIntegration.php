<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\AIService;
use App\Services\AICategorizationService;
use App\Services\TransferDetectionService;
use App\Models\User;

class TestGroqIntegration extends Command
{
    protected $signature = 'ai:test-groq {api_key} {model=llama-3.3-70b-versatile} {user_id=1}';
    protected $description = 'Testa a integra√ß√£o com Groq';

    public function handle()
    {
        $apiKey = $this->argument('api_key');
        $model = $this->argument('model');
        $userId = $this->argument('user_id');
        
        $user = User::find($userId);
        if (!$user) {
            $this->error("Usu√°rio com ID {$userId} n√£o encontrado");
            return 1;
        }
        
        auth()->login($user);
        
        $this->info("üöÄ Testando integra√ß√£o com Groq");
        $this->line("  API Key: " . substr($apiKey, 0, 10) . "...");
        $this->line("  Modelo: {$model}");
        $this->line("  Usu√°rio: {$user->name}");
        
        // Teste 1: Conex√£o b√°sica
        $this->info("\n1Ô∏è‚É£ Testando conex√£o b√°sica...");
        try {
            $aiService = new AIService('groq', $model, $apiKey);
            $result = $aiService->testConnection();
            
            if ($result) {
                $this->info("‚úÖ Conex√£o com Groq estabelecida com sucesso!");
            } else {
                $this->error("‚ùå Falha na conex√£o com Groq");
                return 1;
            }
        } catch (\Exception $e) {
            $this->error("‚ùå Erro na conex√£o: " . $e->getMessage());
            return 1;
        }
        
        // Teste 2: Categoriza√ß√£o de transa√ß√µes
        $this->info("\n2Ô∏è‚É£ Testando categoriza√ß√£o de transa√ß√µes...");
        try {
            $transactions = [
                [
                    'date' => '2025-07-13',
                    'description' => 'Compra no d√©bito - PADARIA CAPRI',
                    'amount' => 13.59,
                    'type' => 'expense'
                ],
                [
                    'date' => '2025-07-13',
                    'description' => 'SALARIO EMPRESA XYZ LTDA',
                    'amount' => 3500.00,
                    'type' => 'income'
                ],
                [
                    'date' => '2025-07-13',
                    'description' => 'Transfer√™ncia enviada pelo Pix - CARLOS',
                    'amount' => 100.00,
                    'type' => 'expense'
                ]
            ];
            
            // Configurar temporariamente o Groq
            config([
                'ai.enabled' => true,
                'ai.provider' => 'groq',
                'ai.groq.api_key' => $apiKey,
                'ai.groq.model' => $model
            ]);
            
            $categorizationService = new AICategorizationService();
            $categorizedTransactions = $categorizationService->categorizeTransactions($transactions, 6);
            
            $this->info("‚úÖ Categoriza√ß√£o conclu√≠da!");
            
            foreach ($categorizedTransactions as $i => $transaction) {
                $this->line("\n  Transa√ß√£o {$i}:");
                $this->line("    Descri√ß√£o: " . $transaction['description']);
                $this->line("    Tipo: " . $transaction['type']);
                $this->line("    Categoria: " . ($transaction['suggested_category_name'] ?? 'SEM CATEGORIA'));
                $this->line("    Confian√ßa: " . round(($transaction['category_confidence'] ?? 0) * 100) . "%");
                
                if (!empty($transaction['ai_reasoning'])) {
                    $this->line("    Racioc√≠nio: " . substr($transaction['ai_reasoning'], 0, 80) . "...");
                }
            }
            
        } catch (\Exception $e) {
            $this->error("‚ùå Erro na categoriza√ß√£o: " . $e->getMessage());
        }
        
        // Teste 3: Detec√ß√£o de transfer√™ncias
        $this->info("\n3Ô∏è‚É£ Testando detec√ß√£o de transfer√™ncias...");
        try {
            $transferTransactions = [
                [
                    'date' => '2025-07-13',
                    'description' => 'PIX ENVIADO PARA CONTA POUPAN√áA',
                    'amount' => 500.00,
                    'type' => 'expense'
                ],
                [
                    'date' => '2025-07-13',
                    'description' => 'TED RECEBIDA DE CONTA CORRENTE',
                    'amount' => 1000.00,
                    'type' => 'income'
                ]
            ];
            
            $transferService = new TransferDetectionService();
            $transferResults = $transferService->detectTransfers($transferTransactions, 6);
            
            $this->info("‚úÖ Detec√ß√£o de transfer√™ncias conclu√≠da!");
            
            foreach ($transferResults as $i => $result) {
                $this->line("\n  Transa√ß√£o {$i}:");
                $this->line("    Descri√ß√£o: " . $transferTransactions[$i]['description']);
                $this->line("    √â transfer√™ncia: " . ($result['is_transfer'] ? 'SIM' : 'N√ÉO'));
                $this->line("    Confian√ßa: " . round($result['confidence'] * 100) . "%");
                
                if ($result['is_transfer']) {
                    $this->line("    Conta origem: " . ($result['origin_account_name'] ?? 'N/A'));
                    $this->line("    Conta destino: " . ($result['destination_account_name'] ?? 'N/A'));
                }
                
                if (!empty($result['reasoning'])) {
                    $this->line("    Racioc√≠nio: " . substr($result['reasoning'], 0, 80) . "...");
                }
            }
            
        } catch (\Exception $e) {
            $this->error("‚ùå Erro na detec√ß√£o de transfer√™ncias: " . $e->getMessage());
        }
        
        // Teste 4: An√°lise de texto simples
        $this->info("\n4Ô∏è‚É£ Testando an√°lise de texto simples...");
        try {
            $aiService = new AIService('groq', $model, $apiKey);
            $response = $aiService->analyzeText("Categorize esta transa√ß√£o: Compra no d√©bito - SUPERMERCADO EXTRA");
            
            $this->info("‚úÖ An√°lise de texto conclu√≠da!");
            $this->line("  Resposta: " . substr($response, 0, 200) . "...");
            
        } catch (\Exception $e) {
            $this->error("‚ùå Erro na an√°lise de texto: " . $e->getMessage());
        }
        
        $this->info("\nüéâ Teste de integra√ß√£o com Groq conclu√≠do!");
        $this->line("O provedor Groq est√° funcionando corretamente no sistema Onlifin.");
        
        return 0;
    }
}
