# Makefile para Onlifin Docker
.PHONY: help build up down restart logs shell clean dev prod backup restore

# Configura√ß√µes
COMPOSE_FILE = docker-compose.yml
DEV_COMPOSE_FILE = docker-compose.yml -f docker-compose.dev.yml
SERVICE_NAME = onlifin

# Cores para output
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m

help: ## Mostrar esta ajuda
	@echo "$(GREEN)Onlifin Docker - Comandos dispon√≠veis:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ""

build: ## Build da imagem Docker
	@echo "$(GREEN)üî® Fazendo build da imagem...$(NC)"
	docker-compose -f $(COMPOSE_FILE) build --no-cache

up: ## Iniciar aplica√ß√£o (produ√ß√£o)
	@echo "$(GREEN)üöÄ Iniciando Onlifin (produ√ß√£o)...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Aplica√ß√£o dispon√≠vel em http://localhost:8080$(NC)"

down: ## Parar aplica√ß√£o
	@echo "$(YELLOW)‚èπÔ∏è  Parando aplica√ß√£o...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down

restart: ## Reiniciar aplica√ß√£o
	@echo "$(YELLOW)üîÑ Reiniciando aplica√ß√£o...$(NC)"
	docker-compose -f $(COMPOSE_FILE) restart

logs: ## Ver logs da aplica√ß√£o
	docker-compose -f $(COMPOSE_FILE) logs -f $(SERVICE_NAME)

shell: ## Acessar shell do container
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) sh

clean: ## Limpar containers, imagens e volumes
	@echo "$(RED)üßπ Limpando containers, imagens e volumes...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down --rmi all --volumes --remove-orphans
	docker system prune -f

# Comandos de desenvolvimento
dev: ## Iniciar ambiente de desenvolvimento
	@echo "$(GREEN)üõ†Ô∏è  Iniciando ambiente de desenvolvimento...$(NC)"
	docker-compose -f $(DEV_COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Ambiente de desenvolvimento dispon√≠vel:$(NC)"
	@echo "  üåê App: http://localhost:8080"
	@echo "  üìß MailHog: http://localhost:8025"
	@echo "  üóÑÔ∏è  Adminer: http://localhost:8081"

dev-down: ## Parar ambiente de desenvolvimento
	@echo "$(YELLOW)‚èπÔ∏è  Parando ambiente de desenvolvimento...$(NC)"
	docker-compose -f $(DEV_COMPOSE_FILE) down

dev-logs: ## Ver logs do ambiente de desenvolvimento
	docker-compose -f $(DEV_COMPOSE_FILE) logs -f

# Comandos Laravel
migrate: ## Executar migra√ß√µes
	@echo "$(GREEN)üîÑ Executando migra√ß√µes...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) php artisan migrate

seed: ## Executar seeders
	@echo "$(GREEN)üå± Executando seeders...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) php artisan db:seed

fresh: ## Resetar banco e executar migra√ß√µes + seeders
	@echo "$(YELLOW)üîÑ Resetando banco de dados...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) php artisan migrate:fresh --seed

cache-clear: ## Limpar cache da aplica√ß√£o
	@echo "$(GREEN)üßπ Limpando cache...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) php artisan config:clear
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) php artisan route:clear
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) php artisan view:clear
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) php artisan cache:clear

optimize: ## Otimizar aplica√ß√£o para produ√ß√£o
	@echo "$(GREEN)‚ö° Otimizando aplica√ß√£o...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) php artisan config:cache
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) php artisan route:cache
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) php artisan view:cache

# Comandos de backup
backup: ## Fazer backup do banco SQLite
	@echo "$(GREEN)üíæ Fazendo backup do banco...$(NC)"
	@mkdir -p backups
	docker cp $(SERVICE_NAME)-app:/var/www/html/database/database.sqlite ./backups/backup-$(shell date +%Y%m%d-%H%M%S).sqlite
	@echo "$(GREEN)‚úÖ Backup salvo em ./backups/$(NC)"

restore: ## Restaurar backup do banco (use: make restore FILE=backup.sqlite)
	@if [ -z "$(FILE)" ]; then \
		echo "$(RED)‚ùå Especifique o arquivo: make restore FILE=backup.sqlite$(NC)"; \
		exit 1; \
	fi
	@echo "$(YELLOW)üîÑ Restaurando backup $(FILE)...$(NC)"
	docker cp ./backups/$(FILE) $(SERVICE_NAME)-app:/var/www/html/database/database.sqlite
	docker-compose -f $(COMPOSE_FILE) restart $(SERVICE_NAME)
	@echo "$(GREEN)‚úÖ Backup restaurado$(NC)"

# Comandos de monitoramento
status: ## Ver status dos containers
	docker-compose -f $(COMPOSE_FILE) ps

health: ## Verificar sa√∫de da aplica√ß√£o
	@echo "$(GREEN)üè• Verificando sa√∫de da aplica√ß√£o...$(NC)"
	@curl -f -s http://localhost:8080/ > /dev/null && echo "$(GREEN)‚úÖ Aplica√ß√£o est√° saud√°vel$(NC)" || echo "$(RED)‚ùå Aplica√ß√£o n√£o est√° respondendo$(NC)"

# Comandos de produ√ß√£o
prod: build up optimize ## Deploy completo para produ√ß√£o
	@echo "$(GREEN)üéâ Deploy de produ√ß√£o conclu√≠do!$(NC)"

# Comandos de instala√ß√£o
install: ## Instala√ß√£o completa (primeira vez)
	@echo "$(GREEN)üì¶ Instala√ß√£o completa do Onlifin...$(NC)"
	@if [ ! -f .env ]; then cp .env.example .env; echo "$(YELLOW)‚ö†Ô∏è  Configure o arquivo .env antes de continuar$(NC)"; fi
	$(MAKE) build
	$(MAKE) up
	sleep 10
	$(MAKE) migrate
	$(MAKE) seed
	$(MAKE) optimize
	@echo "$(GREEN)üéâ Instala√ß√£o conclu√≠da! Acesse http://localhost:8080$(NC)"

# Comando padr√£o
.DEFAULT_GOAL := help
