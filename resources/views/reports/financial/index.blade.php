<x-app-layout>\n    <x-slot name=\"header\">\n        <h2 class=\"font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight\">\n            {{ __('Relatórios Financeiros') }}\n        </h2>\n    </x-slot>\n\n    <div class=\"py-12\">\n        <div class=\"max-w-7xl mx-auto sm:px-6 lg:px-8\">\n            <div class=\"bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg\">\n                <div class=\"p-6 text-gray-900 dark:text-gray-100\">\n                    <h3 class=\"text-lg font-medium text-gray-900 dark:text-gray-200 mb-4\">Gastos por Categoria (Últimos 30 dias)</h3>\n                    \n                    <!-- Filtros de Data (opcional, pode ser implementado depois) -->\n                    <div class=\"mb-4 flex space-x-4 items-center\">\n                        <div>\n                            <label for=\"start_date\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">Data Inicial:</label>\n                            <input type=\"date\" id=\"start_date\" name=\"start_date\" class=\"form-input mt-1 block w-full rounded-md border-gray-300 shadow-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300\">\n                        </div>\n                        <div>\n                            <label for=\"end_date\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">Data Final:</label>\n                            <input type=\"date\" id=\"end_date\" name=\"end_date\" class=\"form-input mt-1 block w-full rounded-md border-gray-300 shadow-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300\">\n                        </div>\n                        <button id=\"filter_button\" class=\"btn btn-secondary mt-5\">Filtrar</button>\n                    </div>\n\n                    <div style=\"width: 75%; margin: auto; min-height: 400px;\">\n                        <canvas id=\"expensesByCategoryChart\"></canvas>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    @push(\'scripts\')\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script>\n        document.addEventListener(\'DOMContentLoaded\', function () {\n            const ctx = document.getElementById(\'expensesByCategoryChart\').getContext(\'2d\');\n            let expensesChart;\n\n            const startDateInput = document.getElementById(\'start_date\');\n            const endDateInput = document.getElementById(\'end_date\');\n            const filterButton = document.getElementById(\'filter_button\');\n\n            // Datas padrão (últimos 30 dias)\n            const today = new Date();\n            const thirtyDaysAgo = new Date(new Date().setDate(today.getDate() - 30));\n            startDateInput.valueAsDate = thirtyDaysAgo;\n            endDateInput.valueAsDate = today;\n\n            async function fetchChartData(startDate, endDate) {\n                let url = `{{ route(\'reports.financial.expensesByCategory\') }}`+
                          `?start_date=${startDate}&end_date=${endDate}`;
                try {\n                    const response = await fetch(url);\n                    if (!response.ok) {\n                        console.error(\'Erro ao buscar dados do gráfico:\', response.statusText);\n                        return null;\n                    }\n                    return await response.json();\n                } catch (error) {\n                    console.error(\'Falha na requisição do gráfico:\', error);\n                    return null;\n                }\n            }\n\n            async function renderChart(startDate, endDate) {\n                const chartData = await fetchChartData(startDate, endDate);\n\n                if (expensesChart) {\n                    expensesChart.destroy(); // Destruir gráfico anterior para redesenhar\n                }\n\n                if (chartData && chartData.datasets && chartData.datasets[0].data.length > 0) {\n                    expensesChart = new Chart(ctx, {\n                        type: \'pie\', // ou 'doughnut'\n                        data: {\n                            labels: chartData.labels,\n                            datasets: chartData.datasets\n                        },\n                        options: {\n                            responsive: true,\n                            maintainAspectRatio: false,\n                            plugins: {\n                                legend: {\n                                    position: \'top\',\n                                },\n                                title: {\n                                    display: true,\n                                    text: \'Gastos por Categoria\'\n                                }\n                            }\n                        }\n                    });\n                } else {\n                    // Exibir mensagem se não houver dados\n                    ctx.font = \'16px Arial\';\n                    ctx.textAlign = \'center\';\n                    ctx.fillText(\'Nenhum dado de despesa encontrado para o período selecionado.\', ctx.canvas.width / 2, ctx.canvas.height / 2);\n                }\n            }\n\n            filterButton.addEventListener(\'click\', () => {\n                const startDate = startDateInput.value;\n                const endDate = endDateInput.value;\n                if (startDate && endDate) {\n                    renderChart(startDate, endDate);\n                }\n            });\n\n            // Renderizar gráfico inicial\n            renderChart(startDateInput.value, endDateInput.value);\n        });\n    </script>\n    @endpush\n</x-app-layout>\n 